Elm.Combine = Elm.Combine || {};
Elm.Combine.Char = Elm.Combine.Char || {};
Elm.Combine.Char.make = function (_elm) {
   "use strict";
   _elm.Combine = _elm.Combine || {};
   _elm.Combine.Char = _elm.Combine.Char || {};
   if (_elm.Combine.Char.values) return _elm.Combine.Char.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Combine = Elm.Combine.make(_elm),
   $Combine$Infix = Elm.Combine.Infix.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var crlf = A2($Combine$Infix._op["<?>"],A2($Combine$Infix._op["<$"],_U.chr("\n"),$Combine.regex("\r\n")),"expected crlf");
   var satisfy = function (pred) {
      return $Combine.Parser(function (cx) {
         var message = "could not satisfy predicate";
         var _p0 = $String.uncons(cx.input);
         if (_p0.ctor === "Just") {
               var _p1 = _p0._0._0;
               return pred(_p1) ? {ctor: "_Tuple2",_0: $Combine.Done(_p1),_1: _U.update(cx,{input: _p0._0._1,position: cx.position + 1})} : {ctor: "_Tuple2"
                                                                                                                                            ,_0: $Combine.Fail(_U.list([message]))
                                                                                                                                            ,_1: cx};
            } else {
               return {ctor: "_Tuple2",_0: $Combine.Fail(_U.list([message])),_1: cx};
            }
      });
   };
   var $char = function (c) {
      return A2($Combine$Infix._op["<?>"],satisfy(F2(function (x,y) {    return _U.eq(x,y);})(c)),A2($Basics._op["++"],"expected ",$Basics.toString(c)));
   };
   var anyChar = A2($Combine$Infix._op["<?>"],satisfy($Basics.always(true)),"expected any character");
   var oneOf = function (cs) {
      return A2($Combine$Infix._op["<?>"],satisfy(A2($Basics.flip,$List.member,cs)),A2($Basics._op["++"],"expected one of ",$Basics.toString(cs)));
   };
   var noneOf = function (cs) {
      return A2($Combine$Infix._op["<?>"],
      satisfy(function (_p2) {    return $Basics.not(A3($Basics.flip,$List.member,cs,_p2));}),
      A2($Basics._op["++"],"expected none of ",$Basics.toString(cs)));
   };
   var space = A2($Combine$Infix._op["<?>"],satisfy(F2(function (x,y) {    return _U.eq(x,y);})(_U.chr(" "))),"expected space");
   var tab = A2($Combine$Infix._op["<?>"],satisfy(F2(function (x,y) {    return _U.eq(x,y);})(_U.chr("\t"))),"expected tab");
   var newline = A2($Combine$Infix._op["<?>"],satisfy(F2(function (x,y) {    return _U.eq(x,y);})(_U.chr("\n"))),"expected newline");
   var eol = A2($Combine$Infix._op["<|>"],newline,crlf);
   var lower = A2($Combine$Infix._op["<?>"],satisfy($Char.isLower),"expected a lowercase character");
   var upper = A2($Combine$Infix._op["<?>"],satisfy($Char.isUpper),"expected an uppercase character");
   var digit = A2($Combine$Infix._op["<?>"],satisfy($Char.isDigit),"expected a digit");
   var octDigit = A2($Combine$Infix._op["<?>"],satisfy($Char.isOctDigit),"expected an octal digit");
   var hexDigit = A2($Combine$Infix._op["<?>"],satisfy($Char.isHexDigit),"expected a hexadecimal digit");
   return _elm.Combine.Char.values = {_op: _op
                                     ,satisfy: satisfy
                                     ,$char: $char
                                     ,anyChar: anyChar
                                     ,oneOf: oneOf
                                     ,noneOf: noneOf
                                     ,space: space
                                     ,tab: tab
                                     ,newline: newline
                                     ,crlf: crlf
                                     ,eol: eol
                                     ,lower: lower
                                     ,upper: upper
                                     ,digit: digit
                                     ,octDigit: octDigit
                                     ,hexDigit: hexDigit};
};