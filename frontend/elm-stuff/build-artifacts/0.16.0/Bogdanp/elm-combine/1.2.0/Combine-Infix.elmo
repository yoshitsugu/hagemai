Elm.Combine = Elm.Combine || {};
Elm.Combine.Infix = Elm.Combine.Infix || {};
Elm.Combine.Infix.make = function (_elm) {
   "use strict";
   _elm.Combine = _elm.Combine || {};
   _elm.Combine.Infix = _elm.Combine.Infix || {};
   if (_elm.Combine.Infix.values) return _elm.Combine.Infix.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Combine = Elm.Combine.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   _op["<|>"] = $Combine.or;
   _op["*>"] = F2(function (lp,rp) {    return A2($Combine.andMap,A2($Combine.map,$Basics.flip($Basics.always),lp),rp);});
   _op["<*"] = F2(function (lp,rp) {    return A2($Combine.andMap,A2($Combine.map,$Basics.always,lp),rp);});
   _op["<?>"] = F2(function (p,m) {    return A2($Combine.mapError,function (_p0) {    return _U.list([m]);},p);});
   _op["<$"] = function (res) {
      return $Combine.map(function (_p1) {    return res;});
   };
   _op["<*>"] = $Combine.andMap;
   _op["<$>"] = $Combine.map;
   return _elm.Combine.Infix.values = {_op: _op};
};