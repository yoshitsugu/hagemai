Elm.RouteParser = Elm.RouteParser || {};
Elm.RouteParser.Parser = Elm.RouteParser.Parser || {};
Elm.RouteParser.Parser.make = function (_elm) {
   "use strict";
   _elm.RouteParser = _elm.RouteParser || {};
   _elm.RouteParser.Parser = _elm.RouteParser.Parser || {};
   if (_elm.RouteParser.Parser.values) return _elm.RouteParser.Parser.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Combine = Elm.Combine.make(_elm),
   $Combine$Char = Elm.Combine.Char.make(_elm),
   $Combine$Infix = Elm.Combine.Infix.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var stringParam = A2($Combine$Infix._op["<$>"],
   $String.fromList,
   $Combine.many1($Combine$Char.noneOf(_U.list([_U.chr("/"),_U.chr("#"),_U.chr("?"),_U.chr("="),_U.chr("&")]))));
   var queryStringParam = A2($Combine.andMap,
   A2($Combine.map,F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}),A2($Combine$Infix._op["<*"],stringParam,$Combine.string("="))),
   stringParam);
   var queryString = A2($Combine$Infix._op["*>"],$Combine.string("?"),A2($Combine.sepBy,$Combine.string("&"),queryStringParam));
   return _elm.RouteParser.Parser.values = {_op: _op,stringParam: stringParam,queryString: queryString,queryStringParam: queryStringParam};
};