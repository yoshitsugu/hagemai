Elm.RouteParser = Elm.RouteParser || {};
Elm.RouteParser.QueryString = Elm.RouteParser.QueryString || {};
Elm.RouteParser.QueryString.make = function (_elm) {
   "use strict";
   _elm.RouteParser = _elm.RouteParser || {};
   _elm.RouteParser.QueryString = _elm.RouteParser.QueryString || {};
   if (_elm.RouteParser.QueryString.values) return _elm.RouteParser.QueryString.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Combine = Elm.Combine.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $RouteParser$Parser = Elm.RouteParser.Parser.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var fromList = function (items) {
      var addItem = F2(function (_p0,dict) {
         var _p1 = _p0;
         var _p2 = _p1._0;
         var keyValues = A2($Maybe.withDefault,_U.list([]),A2($Dict.get,_p2,dict));
         return A3($Dict.insert,_p2,A2($List._op["::"],_p1._1,keyValues),dict);
      });
      return A3($List.foldr,addItem,$Dict.empty,items);
   };
   var parse = function (s) {
      var _p3 = A2($Combine.parse,$RouteParser$Parser.queryString,s);
      if (_p3.ctor === "_Tuple2" && _p3._0.ctor === "Done") {
            return fromList(_p3._0._0);
         } else {
            return $Dict.empty;
         }
   };
   return _elm.RouteParser.QueryString.values = {_op: _op,parse: parse};
};