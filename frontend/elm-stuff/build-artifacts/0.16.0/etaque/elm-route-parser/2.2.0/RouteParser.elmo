Elm.RouteParser = Elm.RouteParser || {};
Elm.RouteParser.make = function (_elm) {
   "use strict";
   _elm.RouteParser = _elm.RouteParser || {};
   if (_elm.RouteParser.values) return _elm.RouteParser.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Combine = Elm.Combine.make(_elm),
   $Combine$Infix = Elm.Combine.Infix.make(_elm),
   $Combine$Num = Elm.Combine.Num.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $RouteParser$Parser = Elm.RouteParser.Parser.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var matchUrl = F3(function (path,_p0,maybeRoute) {
      var _p1 = _p0;
      var _p2 = maybeRoute;
      if (_p2.ctor === "Just") {
            return maybeRoute;
         } else {
            return _p1._0(path);
         }
   });
   var match = F2(function (parsers,url) {    return A3($List.foldl,matchUrl(url),$Maybe.Nothing,parsers);});
   var Router = F2(function (a,b) {    return {fromPath: a,toPath: b};});
   var router = F2(function (routeParsers,pathGenerator) {    return A2(Router,match(routeParsers),pathGenerator);});
   var P = function (a) {    return {ctor: "P",_0: a};};
   var $int = P($Combine$Num.$int);
   var string = P($RouteParser$Parser.stringParam);
   var customParam = P;
   var M = function (a) {    return {ctor: "M",_0: a};};
   var rawMatcher = function (matcher) {    return M(matcher);};
   var parserMatcher = function (parser) {
      var matcher = function (path) {
         var _p3 = A2($Combine.parse,parser,path);
         if (_p3.ctor === "_Tuple2" && _p3._0.ctor === "Done") {
               return $Maybe.Just(_p3._0._0);
            } else {
               return $Maybe.Nothing;
            }
      };
      return rawMatcher(matcher);
   };
   var $static = F2(function (route,path) {
      return parserMatcher(A2($Combine$Infix._op["<$"],route,A2($Combine$Infix._op["*>"],$Combine.string(path),$Combine.end)));
   });
   var dyn1 = F4(function (route,s1,_p4,s2) {
      var _p5 = _p4;
      return parserMatcher(A2($Combine$Infix._op["<*"],
      A2($Combine$Infix._op["<*"],A2($Combine$Infix._op["<$>"],route,A2($Combine$Infix._op["*>"],$Combine.string(s1),_p5._0)),$Combine.string(s2)),
      $Combine.end));
   });
   var dyn2 = F6(function (route,s1,_p7,s2,_p6,s3) {
      var _p8 = _p7;
      var _p9 = _p6;
      return parserMatcher(A2($Combine.andThen,
      A2($Combine$Infix._op["<$>"],route,A2($Combine$Infix._op["*>"],$Combine.string(s1),_p8._0)),
      function (r) {
         return A2($Combine$Infix._op["<$>"],
         r,
         A2($Combine$Infix._op["<*"],A2($Combine$Infix._op["<*"],A2($Combine$Infix._op["*>"],$Combine.string(s2),_p9._0),$Combine.string(s3)),$Combine.end));
      }));
   });
   var dyn3 = F8(function (route,s1,_p12,s2,_p11,s3,_p10,s4) {
      var _p13 = _p12;
      var _p14 = _p11;
      var _p15 = _p10;
      return parserMatcher(A2($Combine.andThen,
      A2($Combine.andThen,
      A2($Combine$Infix._op["<$>"],route,A2($Combine$Infix._op["*>"],$Combine.string(s1),_p13._0)),
      function (r) {
         return A2($Combine$Infix._op["<$>"],r,A2($Combine$Infix._op["*>"],$Combine.string(s2),_p14._0));
      }),
      function (r) {
         return A2($Combine$Infix._op["<$>"],
         r,
         A2($Combine$Infix._op["<*"],A2($Combine$Infix._op["<*"],A2($Combine$Infix._op["*>"],$Combine.string(s3),_p15._0),$Combine.string(s4)),$Combine.end));
      }));
   });
   var mapMatcher = F2(function (mapper,_p16) {
      var _p17 = _p16;
      var newMatcher = function (path) {    return A2($Maybe.map,mapper,_p17._0(path));};
      return M(newMatcher);
   });
   var mapMatchers = F2(function (wrapper,matchers) {    return A2($List.map,mapMatcher(wrapper),matchers);});
   return _elm.RouteParser.values = {_op: _op
                                    ,$int: $int
                                    ,string: string
                                    ,customParam: customParam
                                    ,$static: $static
                                    ,dyn1: dyn1
                                    ,dyn2: dyn2
                                    ,dyn3: dyn3
                                    ,parserMatcher: parserMatcher
                                    ,rawMatcher: rawMatcher
                                    ,match: match
                                    ,router: router
                                    ,mapMatcher: mapMatcher
                                    ,mapMatchers: mapMatchers
                                    ,Router: Router};
};