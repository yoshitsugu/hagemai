Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Home = Elm.Home.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $IssueDetail = Elm.IssueDetail.make(_elm),
   $IssueList = Elm.IssueList.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Routes = Elm.Routes.make(_elm),
   $ServerApi = Elm.ServerApi.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm),
   $TransitRouter = Elm.TransitRouter.make(_elm),
   $TransitStyle = Elm.TransitStyle.make(_elm);
   var _op = {};
   var initialPath = Elm.Native.Port.make(_elm).inbound("initialPath",
   "String",
   function (v) {
      return typeof v === "string" || typeof v === "object" && v instanceof String ? v : _U.badPort("a string",v);
   });
   var menu = F2(function (address,model) {
      return A2($Html.header,
      _U.list([$Html$Attributes.$class("navbar navbar-default")]),
      _U.list([A2($Html.div,
      _U.list([$Html$Attributes.$class("container")]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("navbar-header")]),
              _U.list([A2($Html.div,
              _U.list([$Html$Attributes.$class("navbar-brand")]),
              _U.list([A2($Html.a,$Routes.linkAttrs($Routes.Home),_U.list([$Html.text("Hagemai")]))]))]))
              ,A2($Html.ul,
              _U.list([$Html$Attributes.$class("nav navbar-nav")]),
              _U.list([A2($Html.li,_U.list([]),_U.list([A2($Html.a,$Routes.linkAttrs($Routes.IssueListPage),_U.list([$Html.text("Issues")]))]))]))]))]));
   });
   var initialModel = {transitRouter: $TransitRouter.empty($Routes.EmptyRoute)
                      ,homeModel: $Home.init
                      ,issueListModel: $IssueList.init
                      ,issueDetailModel: $IssueDetail.init};
   var RouterAction = function (a) {    return {ctor: "RouterAction",_0: a};};
   var actions = A2($Signal.map,RouterAction,$TransitRouter.actions);
   var IssueDetailAction = function (a) {    return {ctor: "IssueDetailAction",_0: a};};
   var IssueListAction = function (a) {    return {ctor: "IssueListAction",_0: a};};
   var mountRoute = F3(function (prevRoute,route,model) {
      var _p0 = route;
      switch (_p0.ctor)
      {case "Home": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "IssueListPage": return {ctor: "_Tuple2",_0: model,_1: A2($Effects.map,IssueListAction,$ServerApi.getIssues($IssueList.HandleIssuesRetrieved))};
         case "IssueDetailPage": return {ctor: "_Tuple2"
                                        ,_0: model
                                        ,_1: A2($Effects.map,IssueDetailAction,A2($ServerApi.getIssueAndComments,_p0._0,$IssueDetail.IssueDetailRetrieved))};
         default: return {ctor: "_Tuple2",_0: model,_1: $Effects.none};}
   });
   var routerConfig = {mountRoute: mountRoute
                      ,getDurations: F3(function (_p3,_p2,_p1) {    return {ctor: "_Tuple2",_0: 50,_1: 200};})
                      ,actionWrapper: RouterAction
                      ,routeDecoder: $Routes.decode};
   var init = function (path) {    return A3($TransitRouter.init,routerConfig,path,initialModel);};
   var HomeAction = function (a) {    return {ctor: "HomeAction",_0: a};};
   var update = F2(function (action,model) {
      var _p4 = action;
      switch (_p4.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "HomeAction": var _p5 = A2($Home.update,_p4._0,model.homeModel);
           var model$ = _p5._0;
           var effects = _p5._1;
           return {ctor: "_Tuple2",_0: _U.update(model,{homeModel: model$}),_1: A2($Effects.map,HomeAction,effects)};
         case "IssueListAction": var _p6 = A2($IssueList.update,_p4._0,model.issueListModel);
           var model$ = _p6._0;
           var effects = _p6._1;
           return {ctor: "_Tuple2",_0: _U.update(model,{issueListModel: model$}),_1: A2($Effects.map,IssueListAction,effects)};
         case "IssueDetailAction": var _p7 = A2($IssueDetail.update,_p4._0,model.issueDetailModel);
           var model$ = _p7._0;
           var effects = _p7._1;
           return {ctor: "_Tuple2",_0: _U.update(model,{issueDetailModel: model$}),_1: A2($Effects.map,IssueDetailAction,effects)};
         default: return A3($TransitRouter.update,routerConfig,_p4._0,model);}
   });
   var contentView = F2(function (address,model) {
      var _p8 = $TransitRouter.getRoute(model);
      switch (_p8.ctor)
      {case "Home": return A2($Home.view,A2($Signal.forwardTo,address,HomeAction),model.homeModel);
         case "IssueListPage": return A2($IssueList.view,A2($Signal.forwardTo,address,IssueListAction),model.issueListModel);
         case "IssueDetailPage": return A2($IssueDetail.view,A2($Signal.forwardTo,address,IssueDetailAction),model.issueDetailModel);
         default: return A2($Html.i,_U.list([$Html$Attributes.$class("fa fa-spinner fa-pulse")]),_U.list([]));}
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([$Html$Attributes.$class("container-fluid")]),
      _U.list([A2(menu,address,model)
              ,A2($Html.div,
              _U.list([$Html$Attributes.$class("content"),$Html$Attributes.style($TransitStyle.fade($TransitRouter.getTransition(model)))]),
              _U.list([A2(contentView,address,model)]))]));
   });
   var app = $StartApp.start({init: init(initialPath),update: update,view: view,inputs: _U.list([actions])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var NoOp = {ctor: "NoOp"};
   return _elm.Main.values = {_op: _op
                             ,NoOp: NoOp
                             ,HomeAction: HomeAction
                             ,IssueListAction: IssueListAction
                             ,IssueDetailAction: IssueDetailAction
                             ,RouterAction: RouterAction
                             ,initialModel: initialModel
                             ,actions: actions
                             ,routerConfig: routerConfig
                             ,mountRoute: mountRoute
                             ,init: init
                             ,update: update
                             ,menu: menu
                             ,contentView: contentView
                             ,view: view
                             ,app: app
                             ,main: main};
};